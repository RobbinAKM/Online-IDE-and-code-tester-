<Addded Iframe>
-for seperation of concern between top and iframe sandbox="" is added.
-Running codes directly in the top level html is not ideal.
-Getting code from the front end transpile them and send back to display takes a lot of hops
-Get the code from front end , transpile them locally and display in iframe
-srcDoc is used to display html in iframe
-for better security , event listener is used to communicate between parent(browser) and child (iframe)
-window.addEventListener('message') for parent / iframe.current.contentWindow.postMessage(result.outputFiles[0].text, "*") for child



<Added Monaco Editor >
-"@monaco-editor/react" / need to install monaco-editor seperatly for type definition files
-customized the component with a bunch of configs (React Side)
-Monaco Editor is not written in React.(React is just a wrapper)
-to get into inside codes , option={} is added to the component and configured .
-got the value inside the editor by calling editorDidMount function with (getValue, monacoEditor) as parameters



< 2021/9/12 Added code formatting >
-used prettier and @types/prettier from npm
-currently set for code format on click
-used the reference of monacoEditor from CodeEditor function
-for parser ,used parser-babel for js parsing
-get the code from the editor , format it and push back into the editor
-added bulmaswatch for customizing css
-replace('/\n$/','') replace extra newline at the end of the formatted code with empty string , so that it will not jump to new line after format
-monaco editor recognizes JSX but does not do any syntax highlighting

 <2021/9/13>
 -Refector Preview component as standalone component (reusable)
 -refector bundler component


<2021/9/15>
-added react-resizable
-To expand the width across entire screen ,Infinity is used (because width 100% is not accepted )

<2021/9/16>
-added horizontal constraint Infinity and vertical constraint window.innerHeight*0.9 for vertical
-But this triggers a problem that the preview window is cut off when the window resizes
-need to clean up the global (window) event once after it is used in the component (DO NOT FORGET TO WRAP IT IN THE FUNCTION )
-Added debouncing for better performance in horizontal dragging
-synchronize width states to avoid jumping effect in horizontal resizing
-Added debouncing functionality for code execution
- the browser does not show the text in the preview because we did not configure the execution timeout.
- wrap the post messsage from the iframe with setTimeout function

<2021/9/21>
-we could handle the runtime error but we could not handle async(set timeout) runtime error
-added error event addEventListener(for uncaught error )
-if we are using try/catch and the error is caught inside catch , the error event listener will not trigger
-added event.preventDefault inside error event listener to prevent showing error in console
-added error handling for bundling errors
-inside bundler/index.ts change wrap the result function with try catch
-since both result and error returned are strings , to avoid confusion , object is used

<2021/9/28>
-installed @uiw/react-md-editor@2.1.1 for marked down editor
-created editor-cell for marke down editor
-apply use state to track editing state
-if the div is clicked , show the mark down editor
-if it is clicked outside of the editor(anywhere else)save the content
-useEffect and event listener is Added
-use event.target to limit where the touch event is occured
-override the css in title and w-md-editor classes
-added state to the text editor(Warning : in onChange we do not have to use e.target.value but instead just accept 'str' as an argument and set the value)


<21/10/1>
-added Redux
-https://medium.com/@Alserda/readable-ts-enum-actiontypes-in-react-redux-c105fa0a7c9b (action type and redux to read)
-added combine reducers
-Do not forget to add return type in root state (reducers/index.ts)
-export store and reducers . Used index.ts as main exporter from state folder
-implement functions in action-creators

<21/10/3>
-for direct modification of state object use immer library .
-wrap the entire reducer with produce function from immer .
-we only need to do updates /no need to return anything/ immer will take care of that
-changed the return type innotation from reducer to CellState | void
-for insertCellBefore , if the id is string add the cell in front (of the id of existing cells), else add the cell at last
-made random id generating function to be used inside insertCellBefore(use to string with base 36 0-9 numbers and a-z letters)
-although immer does not need to return any state object , typescript will show error if we return nothing (undefined)
-to satisfy the typescript, we need to return just state
-redux store has store.dispatch() function which we can use to manually dispatch./Use this for testing purposes


<21/10/4>
-added cell-list and cell-list-item tsx files
-useSelector can be use but react will not show the "type" so , custom hook need to be created (https://react-redux.js.org/using-react-redux/usage-with-typescript)
-to get the state inside of the component , just use useTypeSelector(state=>state)
